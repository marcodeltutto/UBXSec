#include "services_microboone.fcl"
#include "triggeralgo_service.fcl"
#include "singles_microboone.fcl"
#include "largeantmodules_microboone.fcl"
#include "mcreco.fcl"
#include "detsimmodules_microboone.fcl"
#include "triggersim_microboone.fcl"
#include "opticaldetectorsim_microboone.fcl"
#include "opticaldetectormodules_microboone.fcl"
#include "photpropservices_microboone.fcl"
#include "correct_saturation.fcl"
#include "caldata_microboone.fcl" 
#include "time_memory_tracker_microboone.fcl"
#include "photpropservices_microboone.fcl"

#include "flashmatchcalib.fcl"

process_name: FlashMatchCalib

services:
{
  scheduler:               { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
    TFileService: { fileName: "flashmatchcalib_output_flat_%tc.root" }
    TimeTracker:             @local::microboone_time_tracker
    MemoryTracker:           @local::microboone_memory_tracker
    RandomNumberGenerator:   {} #ART native random number generator                                                                                          
    message:                 @local::microboone_message_services_prod_debug
    FileCatalogMetadata:  @local::art_file_catalog_mc
    #LLMetaMaker: {Enable: true}
    @table::microboone_simulation_services
    DetectorProperties:             @local::microboone_detproperties
}

services.DetectorPropertiesService.NumberTimeSamples:        6400
services.DetectorPropertiesService.ReadOutWindowSize:        6400
services.DetectorClocksService.InheritClockConfig:           false
services.DetectorClocksService.TriggerOffsetTPC:             -0.400e3
services.DetectorClocksService.TrigModuleName:               "daq"

services.Geometry.ForceUseFCLOnly: true

services.TimeTracker.printSummary: false
services.TimeTracker.dbOutput: {}

services.MemoryTracker.printSummaries: []
services.MemoryTracker.includeMallocInfo: false
services.MemoryTracker.dbOutput.filename: ""

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:   -1        # Number of events to create
  inputCommands: ["keep *_*_*_*", "drop raw::OpDetWaveforms_DataApr2016RecoStage1_saturation_*"]

}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

    producers:
 {
 }

 analyzers:
 {
  ### FlashMatching
  flashmatchcalib : @local::FlashMatchCalib
 }

 reco: [ ]
 ana: [ flashmatchcalib ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 #trigger_paths: [reco] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1,ana]
}

physics.analyzers.flashmatchcalib.FlashMatchConfig.QLLMatch.ZPenaltyThreshold:        1000
physics.analyzers.flashmatchcalib.FlashMatchConfig.QLLMatch.XPenaltyThreshold:        1000
#physics.analyzers.flashmatchcalib.FlashMatchConfig.PhotonLibHypothesis.CCVCorrection: [ 1.03010428,  1.12247025,  1.05450943,  1.06359997,  0.92496701,  1.2578555, 1.43642184,  0.97097869,  1.21723329,  0.8386987,   1.3381655,   1.25068641,  1.40546547,  1.09691199,  1.09919327,  1.19272144,  0.89838785,  1.01445028,  1.27903301,  1.09130308,  1.31567592,  1.0577623,  1.21757927,  1.11874269,  1.18458922,  1.20015619,  1.15704964,  1.35078128,  1.04760561,  1.13483661,  0.95729313,  0.84910329]

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_%tc_fashmatchcalib.root"
   dataTier:    "reconstructed"
   compressionLevel: 1
   outputCommands: [
            "drop *_*_*_*",
            "keep recob::Track_*_pandoraCosmic_*",
            "drop raw::RawDigits_*_*_*",
            "drop recob::Cluster_*_*_*",
            "drop recob::EndPoint2D_*_*_*",
            "drop recob::Hit_*_*_*",
            "drop recob::Vertex_*_*_*",
            "drop recob::Wires_*_*_*",
            "drop recob::PFParticle_*_*_*",
            "drop recob::Wire_*_*_*",
            "drop raw::OpDetWaveform_*_*_*",
            "drop *_*_*_McRecoAprStage1",
            "drop *_*_*_DetSim"]
   }
}

### Here we include the file giving us run/data dependent overrides

### Here we try to suppress known and pointless messages
services.message.destinations :
{
  STDCOUT: 
  {
     type:      "cout"      #tells the message service to output this destination to cout
     threshold: "WARNING"   #tells the message service that this destination applies to WARNING and higher level messages
     append:     true       #says to append all messages to the output
     categories:
     {
       ChannelFilter:
       {
         limit: 0
         reportEvery: 0
       }
       default:
       {
         limit: -1  #don't print anything at the infomsg level except the explicitly named categories
         reportEvery: 1
       }
     }
  }
}


