#include "services_microboone.fcl"
#include "singles_microboone.fcl"
#include "largeantmodules_microboone.fcl"
#include "mcreco.fcl"
#include "detsimmodules_microboone.fcl"
#include "triggersim_microboone.fcl"
#include "opticaldetectorsim_microboone.fcl"
#include "opticaldetectormodules_microboone.fcl"
#include "photpropservices_microboone.fcl"
#include "correct_saturation.fcl"
#include "caldata_microboone.fcl" 
#include "time_memory_tracker_microboone.fcl"
#include "photpropservices_microboone.fcl"

#include "ubflashfinder.fcl"
#include "T0RecoAnodeCathodePiercing.fcl"

#include "intimestudy.fcl"
#include "neutrinoflashmatch.fcl"

process_name : NeutrinoFlashMatch      #The process name must NOT contain any underscores

services:
{
  scheduler:               { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService:            { fileName: "neutrinoflashmatchoutput.root" }
  TimeTracker:             @local::microboone_time_tracker
  MemoryTracker:           @local::microboone_memory_tracker
  RandomNumberGenerator:   {} #ART native random number generator                                                                                          
  message:                 @local::microboone_message_services_prod_debug
  FileCatalogMetadata:     @local::art_file_catalog_mc
  @table::microboone_simulation_services
  BackTracker:             @local::microboone_backtracker
}

services.DetectorPropertiesService.NumberTimeSamples:        6400
services.DetectorPropertiesService.ReadOutWindowSize:        6400
services.DetectorClocksService.InheritClockConfig:           false
services.DetectorClocksService.TriggerOffsetTPC:             -0.400e3
services.DetectorClocksService.TrigModuleName:               "daq"

services.Geometry.ForceUseFCLOnly: true

services.TimeTracker.printSummary: false
services.TimeTracker.dbOutput: {}

services.MemoryTracker.printSummaries: []
services.MemoryTracker.includeMallocInfo: false
services.MemoryTracker.dbOutput.filename: ""


#source is now a root file
source:
{ 
  module_type: RootInput 
  maxEvents:   -1        # Number of events to create
  inputCommands: ["keep *_*_*_*", "drop raw::OpDetWaveforms_DataApr2016RecoStage1_saturation_*"]
}


physics:
{

 producers:
 {
 #  ophitBeam          : @local::microboone_ophit_saturation_beam
 #  ophitCosmic        : @local::microboone_ophit_saturation_cosmic
 #  saturation         : @local::correct_saturation_mc
 #  simpleFlashBeam    : @local::UBFlashBeamMC
 #  simpleFlashCosmic  : @local::UBFlashCosmicMC

   InTimeStudy    : @local::InTimeStudy

 }

 analyzers:
 {
 }

 #reco: [ saturation, ophitBeam, ophitCosmic, simpleFlashBeam, simpleFlashCosmic, NeutrinoMCFlash, NeutrinoFlashMatch ]

 reco: [ InTimeStudy ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [reco]
 #trigger_paths: []

 ana: [ ]

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ana, stream1]
}

services.PmtGainService.PmtGainProvider.UseDB:             false
services.ChannelStatusService.ChannelStatusProvider.UseDB: false
services.DetPedestalService.DetPedestalRetrievalAlg.UseDB: false


outputs:
{
 out1:
 { 
   module_type: RootOutput
   fileName:    "%ifb_%tc_neutrinomcflash.root"
   dataTier:    "reconstructed"
   compressionLevel: 1
   outputCommands: [
            "keep *_*_*_*"]
#            "keep recob::Track_*_pandoraCosmic_*",
#            "drop raw::RawDigits_*_*_*",
#            "drop recob::Cluster_*_*_*",
#            "drop recob::EndPoint2D_*_*_*",
#            "drop recob::Hit_*_*_*",
#            "drop recob::Vertex_*_*_*",
#            "drop recob::Wires_*_*_*",
#            "drop recob::PFParticle_*_*_*",
#            "drop recob::Wire_*_*_*",
#            "drop raw::OpDetWaveform_*_*_*",
#            "drop *_*_*_McRecoAprStage1",
#            "drop *_*_*_DetSim"]
   }
}


services.message.destinations :
{
  STDCOUT:
  {
     type:      "cout"      #tells the message service to output this destination to cout
     threshold: "WARNING"   #tells the message service that this destination applies to WARNING and higher level messages
     append:     true       #says to append all messages to the output
     categories:
     {
       ChannelFilter:
       {
         limit: 0
         reportEvery: 0
       }
       default:
       {
         limit: -1  #don't print anything at the infomsg level except the explicitly named categories
         reportEvery: 1
       }
     }
  }
}
